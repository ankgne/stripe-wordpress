<?php

// register the ajax process function with wordpress
add_action("wp_ajax_stripe_plugin_process_card", "stripe_plugin_process_card");
add_action("wp_ajax_nopriv_stripe_plugin_process_card", "stripe_plugin_process_card");

function stripe_plugin_process_card() {

	$inventory = array(
		"item1" => 300.0,
		"item2" => 200.0,
		"item3" => 1000.0);

	// Use the globals defined in stripe.php
	global $secretKey;
	global $currencySymbol;
	global $transPrefix;

	// Create the response array
	$response = array(
		'success' => false
	);

	if($_POST) {
		// Load the official Stripe PHP bootstrap file
		require_once STRIPE_PAYMENTS_PLUGIN_DIR.'/stripe-php-1.5.19/lib/Stripe.php';

		// Extract the extra data
		$meta = array();
		if($transPrefix) {
			$meta['prefix'] = $transPrefix;
		}
		if($_POST['email']) {
			$meta['email'] = $_POST['email'];
		}
		if($_POST['paymentId']) {
			$meta['paymentId'] = $_POST['paymentId'];
		}
		if(!isset($_POST['desc']) || !array_key_exists($_POST['desc'], $inventory)) {
			$response['error'] = "Invalid item (". $_POST['desc'] .") ". $inventory[$_POST['desc']] ." was selected. Please try again, or contact someone for help.";
			echo json_encode($response);
			die();
		}

		$amount = $inventory[$_POST['desc']];
		// Create the data to submit to Stripe's secure processing
		//	Note: Card number data is not accessible. The code can
		//	only access a 'token' that was previously generated by
		//	Stripe via AJAX post.
		$params = array(
			'amount'		=> $amount,
			'currency'		=> $currencySymbol,
			'card'			=> $_POST['token'],
			'description'		=> array_implode(':=', '|', $meta).$_POST['desc']
		);

		// Submit the payment and charge the card.
		try {
			Stripe::setApiKey($secretKey);
			$charge = Stripe_Charge::create($params);

			// Charge was successful. Fill in response details.
			$response['success']		= true;
			$response['id']				= $charge->id;
			$response['amount']			= number_format($charge->amount/100, 2);
			$response['fee']			= number_format($charge->fee/100, 2);
			$response['card_type']		= $charge->card->type;
			$response['card_last4']		= $charge->card->last4;
			$response['meta']			= $meta;
			$response['desc']			= $params['description'];
		} catch (Exception $e) {
			$response['error'] = $e->getMessage();
		}
	}

	// Add additional processing here
	if($response['success']) {
		// Succeess
	} else {
		// Failed
	}

	// Serialize the response back as JSON
	echo json_encode($response);
	die();
}

function array_implode ($glue, $separator, $array) {
	if( ! is_array($array) ) {
		return $array;
	}
	$string = array();
	foreach( $array as $key => $val ) {
		if( is_array( $val )) {
			$val = implode(",", $val);
		}
		$string[] = "{$key}{$glue}{$val}";
	}
	return implode($separator, $string);
}

?>